name: AliYunDriveSync-Actions

on:
  workflow_dispatch:
  push:
    branches:
      - master
  schedule:
    - cron: 30 */6 * * *
  watch:
    types: started

jobs:
  run-it:
    runs-on: ubuntu-latest
    name: AliYunDriveSync-Actions
    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: Rclone-Install
        run: curl https://rclone.org/install.sh | sudo bash

      - name: Read Rclone config from GitHub secret
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: WebDAV-Run
        env:
          ALIYUNDRIVE_REFRESH_TOKEN: ${{ secrets.ALIYUNDRIVE_REFRESH_TOKEN }}
          WEBDAV_AUTH_USER: ${{ secrets.WEBDAV_AUTH_USER }}
          WEBDAV_AUTH_PASSWORD: ${{ secrets.WEBDAV_AUTH_PASSWORD }}
        run: |
          docker run -d --name=aliyundrive-webdav --restart=unless-stopped -p 8080:8080 \
            -v /etc/aliyundrive-webdav/:/etc/aliyundrive-webdav/ \
            -e REFRESH_TOKEN=$ALIYUNDRIVE_REFRESH_TOKEN \
            messense/aliyundrive-webdav /usr/bin/aliyundrive-webdav --auto-index --workdir /etc/aliyundrive-webdav --no-trash

      - name: Wait for WebDAV
        run: |
          echo "等待 WebDAV 启动..."
          for i in {1..30}; do
            if curl -s --head --fail http://127.0.0.1:8080/; then
              echo "WebDAV 已启动"
              exit 0
            fi
            echo "等待中 ($i)..."
            sleep 2
          done
          echo "WebDAV 启动失败"
          exit 1

      - name: Rclone-Run
        run: |
          echo "启动 rclone 远程控制守护进程 (rcd)..."
          nohup rclone rcd --rc-web-gui --rc-no-auth --log-level INFO --rc-addr=localhost:5572 > /dev/null 2>&1 &
          sleep 5  # 等待 rclone rcd 启动完成

          # 检查 rclone rc 是否可用
          if curl -s http://localhost:5572/rc/noop; then
            echo "rclone rcd 启动成功"
          else
            echo "rclone rcd 启动失败，退出"
            exit 1
          fi

          echo "执行 rclone 远程同步任务..."
          rclone rc sync/sync srcFs="pikpak:Video/public" dstFs="webdav:/public"
          echo "阿里云盘 public 同步完毕"

          rclone rc sync/sync srcFs="pikpak:Video/complete" dstFs="webdav:/complete"
          echo "阿里云盘 complete 同步完毕"

          rclone rc sync/sync srcFs="pikpak:Video/Movies" dstFs="webdav:/Movies"
          echo "阿里云盘 Movies 同步完毕"

          rclone rc sync/sync srcFs="pikpak:Video/Kids" dstFs="webdav:/Kids"
          echo "阿里云盘 Kids 同步完毕"

          rclone rc sync/sync srcFs="pikpak:Video/ping" dstFs="webdav:/ping"
          echo "阿里云盘 ping 同步完毕"

          rclone rc sync/sync srcFs="pikpak:Video/xm" dstFs="webdav:/xm"
          echo "阿里云盘 xm 同步完毕"

          # 备份 refresh_token
          rclone copyto /etc/aliyundrive-webdav/refresh_token outlook_com:/aliyunpan/refresh_token
          echo "阿里云盘 refresh-token 备份完毕"

          rclone copy ~/.config/rclone weking_dropbox:PrivateDoc/rclone/AliYunpan
          echo "rclone 配置档备份完毕"

      - name: Write Rclone config to GitHub secret
        env:
          CLI_TOKEN: ${{ secrets.CLI_TOKEN }}
          REPO: wekingchen/aliyundrive-sync
        run: |
          RCLONE_CONFIG=$(cat ~/.config/rclone/rclone.conf)
          REFRESH_TOKEN=$(cat /etc/aliyundrive-webdav/refresh_token)
          gh auth login --with-token <<< "${CLI_TOKEN}"
          gh secret set RCLONE_CONFIG -b"${RCLONE_CONFIG}" --repo "${REPO}"
          gh secret set ALIYUNDRIVE_REFRESH_TOKEN -b"${REFRESH_TOKEN}" --repo "${REPO}"

          # 读取授权码并备份到云盘
          echo ${CLI_TOKEN} > token
          rclone copyto token weking_dropbox:PrivateDoc/rclone/CLI_TOKEN

      - name: Delete workflow runs
        uses: wekingchen/delete-workflow-runs@main
        with:
           retain_days: 7
           keep_minimum_runs: 550   
